{"version":3,"file":"static/js/674.e3c40d34.chunk.js","mappings":"qOAGO,SAAeA,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,gGAAmCC,EAAnC,+BAA0C,EAAGC,EAA7C,+BAAsD,GAAtD,SAICC,EAJD,+BAIkBH,EAAX,mBAJP,oCAMCE,IACFC,GAAS,iBAAaD,EAAOE,SAE3BH,IACFE,GAAS,gBAAYF,IAVpB,UAYoBI,EAAAA,EAAAA,IAAUF,GAZ9B,eAYGG,EAZH,yBAaIA,GAbJ,kCAeHC,IAAAA,OAAAA,QAAwB,KAAMC,SAf3B,kF,6CCaP,IAde,WACb,OACE,0BACE,SAAC,KAAD,CACEC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAIhB,C,sKCXYC,EAAYC,EAAAA,EAAAA,IAAH,4CAITC,GAASD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,oYAkBNG,EAAcH,EAAAA,EAAAA,IAAH,gFAMXI,EAAUJ,EAAAA,EAAAA,IAAH,qEAKPK,EAAUL,EAAAA,EAAAA,IAAH,0NAWPM,EAAgBN,EAAAA,EAAAA,EAAH,6CAIbO,GAAWP,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,4GAQRQ,GAAaR,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,4G,SCoBvB,EA9DqB,SAAC,GAAiB,IAAD,IAAdS,EAAc,EAAdA,QACtB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACjB,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KAEMC,EAAU,oBAAGJ,EAASK,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,KAC3CC,EAAAA,EAAAA,YAAU,WACRJ,GAAa,IACblC,EAAAA,EAAAA,GAAU,UAAD,OAAW6B,GAAW,GAAGU,MAAK,SAAAhC,GAErC,GADA2B,GAAa,GACW,MAApB3B,EAASiC,OACX,MAAM,IAAIC,MAAM,yBAEhBb,EAASrB,EAASmC,MAClBR,GAAa,EAEhB,GACF,GAAE,CAACL,IACJ,IACEc,EAMEhB,EANFgB,OACAC,EAKEjB,EALFiB,eACAC,EAIElB,EAJFkB,SACAC,EAGEnB,EAHFmB,YACAC,EAEEpB,EAFFoB,aACAC,EACErB,EADFqB,aAEIC,EAAUxB,EAAUqB,EAC1B,OACE,UAAC/B,EAAD,WACGkB,IAAa,SAACiB,EAAA,EAAD,KACd,SAACjC,EAAD,CAAQkC,GAAIhB,EAAZ,SAAwB,aACxB,UAAChB,EAAD,YACE,SAACE,EAAD,CAAS+B,IAAKH,EAASI,IAAKT,KAC5B,UAACxB,EAAD,YACE,0BACGwB,EAAe,KAAGG,EAAa,QAElC,yBAAG,WAASC,EAAa,eACzB,wBAAI,eACJ,SAAC1B,EAAD,UAAgBuB,KAChB,yBAAG,WAASF,GAAUA,EAAOW,KAAI,qBAAGC,IAAH,IAAoBC,KAAK,gBAG9D,4BACE,wBAAI,6BACJ,2BACE,yBACE,SAACjC,EAAD,CAAU4B,GAAG,OAAb,SAAoB,YAEtB,yBACE,SAAC3B,EAAD,CAAY2B,GAAG,UAAf,SAAyB,qBAI/B,SAAC,EAAAM,SAAD,WACE,SAAC,KAAD,QAIP,C","sources":["REST API/api-service.js","components/Loader/Loader.jsx","components/Pages/MovieDetails.styled.js","components/Pages/MovieDetails.jsx"],"sourcesContent":["import Notiflix from 'notiflix';\nimport axios from 'axios';\n\nexport async function fetchData(FLEX_URL, page = 1, search = '') {\n  try {\n    const BASE_URL = `https://api.themoviedb.org/3`;\n    const API_KEY = `e001340a26371433e04561724452dcfa`;\n    let URL = BASE_URL + FLEX_URL + `?api_key=${API_KEY}`;\n\n    if (search) {\n      URL = URL + `&query=${search.trim()}`;\n    }\n    if (page) {\n      URL = URL + `&page=${page}`;\n    }\n    const responce = await axios.get(URL);\n    return responce;\n  } catch (error) {\n    Notiflix.Notify.failure(error.message);\n  }\n}\n","import { RotatingLines } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  padding: 0 16px;\n`;\n\nexport const Button = styled(Link)`\n  position: relative;\n  display: inline-block;\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: #333;\n  color: white;\n  text-decoration: none;\n  border-radius: 5px;\n  transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;\n  margin-bottom: 10px;\n  top: -25px;\n  &:hover {\n    background-color: #ddd;\n    color: black;\n  }\n`;\n\nexport const PositionDiv = styled.div`\n  display: flex;\n  position: relative;\n  top: -15px;\n`;\n\nexport const TextPos = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FilmImg = styled.img`\n  width: 300px;\n  height: 450px;\n  margin-right: 20px;\n  transition: transform 0.3s ease-in-out;\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n  }\n`;\n\nexport const OverviewDescr = styled.p`\n  max-width: 400px;\n`;\n\nexport const CastLink = styled(Link)`\n  text-decoration: none;\n  font-size: 16px;\n  &:hover {\n    color: orange;\n  }\n`;\n\nexport const ReviewLink = styled(Link)`\n  text-decoration: none;\n  font-size: 16px;\n  &:hover {\n    color: orange;\n  }\n`;\n","import { useEffect, useState, Suspense } from 'react';\n\nimport { useLocation, useParams, Outlet } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Loader from 'components/Loader/Loader';\nimport { fetchData } from 'REST API/api-service';\nimport { Button } from './MovieDetails.styled';\nimport {\n  Container,\n  FilmImg,\n  PositionDiv,\n  TextPos,\n  OverviewDescr,\n  ReviewLink,\n  CastLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = ({ imgPost }) => {\n  const [movie, setMovie] = useState([]);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  //return to back or home page next line\n  const backButton = location.state?.from ?? '/';\n  useEffect(() => {\n    setIsLoading(true);\n    fetchData(`/movie/${movieId}`, 0).then(responce => {\n      setIsLoading(false);\n      if (responce.status !== 200) {\n        throw new Error('Something went wrong!');\n      } else {\n        setMovie(responce.data);\n        setIsLoading(false);\n      }\n    });\n  }, [movieId]);\n  const {\n    genres,\n    original_title,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = movie;\n  const imgPath = imgPost + poster_path;\n  return (\n    <Container>\n      {isLoading && <Loader />}\n      <Button to={backButton}>go back</Button>\n      <PositionDiv>\n        <FilmImg src={imgPath} alt={original_title} />\n        <TextPos>\n          <h2>\n            {original_title} ({release_date})\n          </h2>\n          <p>Rating: {vote_average} points.</p>\n          <h3>Overview:</h3>\n          <OverviewDescr>{overview}</OverviewDescr>\n          <p>Genres: {genres && genres.map(({ name }) => name).join(', ')}</p>\n        </TextPos>\n      </PositionDiv>\n      <div>\n        <h2>Additional information:</h2>\n        <ul>\n          <li>\n            <CastLink to=\"cast\">Cast</CastLink>\n          </li>\n          <li>\n            <ReviewLink to=\"reviews\">Reviews</ReviewLink>\n          </li>\n        </ul>\n      </div>\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </Container>\n  );\n};\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  imgPost: PropTypes.string.isRequired,\n};\n"],"names":["fetchData","FLEX_URL","page","search","URL","trim","axios","responce","Notiflix","message","strokeColor","strokeWidth","animationDuration","width","visible","Container","styled","Button","Link","PositionDiv","TextPos","FilmImg","OverviewDescr","CastLink","ReviewLink","imgPost","useState","movie","setMovie","movieId","useParams","location","useLocation","isLoading","setIsLoading","backButton","state","from","useEffect","then","status","Error","data","genres","original_title","overview","poster_path","release_date","vote_average","imgPath","Loader","to","src","alt","map","name","join","Suspense"],"sourceRoot":""}