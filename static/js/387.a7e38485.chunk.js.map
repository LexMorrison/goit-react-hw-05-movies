{"version":3,"file":"static/js/387.a7e38485.chunk.js","mappings":"qOAGO,SAAeA,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,gGAAmCC,EAAnC,+BAA0C,EAAGC,EAA7C,+BAAsD,GAAtD,SAICC,EAJD,+BAIkBH,EAAX,mBAJP,oCAMCE,IACFC,GAAS,iBAAaD,EAAOE,SAE3BH,IACFE,GAAS,gBAAYF,IAVpB,UAYoBI,EAAAA,EAAAA,IAAUF,GAZ9B,eAYGG,EAZH,yBAaIA,GAbJ,kCAeHC,IAAAA,OAAAA,QAAwB,KAAMC,SAf3B,kF,mLCDMC,EAAYC,EAAAA,EAAAA,GAAH,wGAOTC,EAAYD,EAAAA,EAAAA,GAAH,6CAITE,EAAWF,EAAAA,EAAAA,IAAH,yCAIRG,EAAYH,EAAAA,EAAAA,GAAH,+CAITI,EAAaJ,EAAAA,EAAAA,EAAH,+C,SCoCvB,EA5Ca,WACX,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KAkBA,OAdAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAQ,mCAAG,8GAEU1B,EAAAA,EAAAA,GAAU,UAAD,OAAWmB,EAAX,YAA8B,GAFjD,OAEPZ,EAFO,OAGbW,EAAUX,EAASoB,KAAKC,MAHX,gDAKbJ,EAAS,SALI,yBAObF,GAAa,GAPA,4EAAH,qDAUdI,GACD,GAAE,CAACP,KAEF,2BACGE,IAAa,SAACQ,EAAA,EAAD,IACbN,IAAS,uBAAG,gCACZN,EAAOa,OAAS,GAAI,wBAAI,UAAY,wBAAI,aACxCb,IACC,SAACP,EAAD,UACGO,EAAOc,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,GAAIC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACV,UAACvB,EAAD,YACE,SAACC,EAAD,CACEuB,IAAKD,EA3BE,mCA2B4BA,EAzB/C,8EA0BYE,IAAKH,KAEP,UAACpB,EAAD,WAAW,iBAAeoB,MAC1B,SAACnB,EAAD,UAAaiB,MANCC,EADN,QAcrB,C,6CCxCD,IAde,WACb,OACE,0BACE,SAAC,KAAD,CACEK,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAIhB,C","sources":["REST API/api-service.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.jsx"],"sourcesContent":["import Notiflix from 'notiflix';\nimport axios from 'axios';\n\nexport async function fetchData(FLEX_URL, page = 1, search = '') {\n  try {\n    const BASE_URL = `https://api.themoviedb.org/3`;\n    const API_KEY = `e001340a26371433e04561724452dcfa`;\n    let URL = BASE_URL + FLEX_URL + `?api_key=${API_KEY}`;\n\n    if (search) {\n      URL = URL + `&query=${search.trim()}`;\n    }\n    if (page) {\n      URL = URL + `&page=${page}`;\n    }\n    const responce = await axios.get(URL);\n    return responce;\n  } catch (error) {\n    Notiflix.Notify.failure(error.message);\n  }\n}\n","import styled from '@emotion/styled';\n\nexport const ActorList = styled.ul`\n  display: flex;\n  gap: 40px;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nexport const ActorItem = styled.li`\n  max-width: 250px;\n`;\n\nexport const ActorImg = styled.img`\n  width: 250px;\n`;\n\nexport const ActorName = styled.h4`\n  text-align: center;\n`;\n\nexport const ActorVoice = styled.p`\n  text-align: center;\n`;\n","import { fetchData } from 'REST API/api-service';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Loader from 'components/Loader/Loader';\nimport {\n  ActorList,\n  ActorItem,\n  ActorImg,\n  ActorName,\n  ActorVoice,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const BASE_URL_IMG = 'https://image.tmdb.org/t/p/w500/';\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n  useEffect(() => {\n    setIsLoading(true);\n    const getActor = async () => {\n      try {\n        const responce = await fetchData(`/movie/${movieId}/credits`, 0);\n        setActors(responce.data.cast);\n      } catch {\n        setError('error');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getActor();\n  }, [movieId]);\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <p>Oops, something went wrong!</p>}\n      {actors.length > 0 ? <h3>Cast</h3> : <h3>No cast!</h3>}\n      {actors && (\n        <ActorList>\n          {actors.map(({ character, id, name, profile_path }) => (\n            <ActorItem key={id}>\n              <ActorImg\n                src={profile_path ? BASE_URL_IMG + profile_path : defaultImg}\n                alt={name}\n              />\n              <ActorName>Actor's name: {name}</ActorName>\n              <ActorVoice>{character}</ActorVoice>\n            </ActorItem>\n          ))}\n        </ActorList>\n      )}\n    </div>\n  );\n};\nexport default Cast;\n","import { RotatingLines } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n"],"names":["fetchData","FLEX_URL","page","search","URL","trim","axios","responce","Notiflix","message","ActorList","styled","ActorItem","ActorImg","ActorName","ActorVoice","useState","actors","setActors","movieId","useParams","isLoading","setIsLoading","error","setError","useEffect","getActor","data","cast","Loader","length","map","character","id","name","profile_path","src","alt","strokeColor","strokeWidth","animationDuration","width","visible"],"sourceRoot":""}