{"version":3,"file":"static/js/186.cbf58eb8.chunk.js","mappings":"qOAGO,SAAeA,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,gGAAmCC,EAAnC,+BAA0C,EAAGC,EAA7C,+BAAsD,GAAtD,SAICC,EAJD,+BAIkBH,EAAX,mBAJP,oCAMCE,IACFC,GAAS,iBAAaD,EAAOE,SAE3BH,IACFE,GAAS,gBAAYF,IAVpB,UAYoBI,EAAAA,EAAAA,IAAUF,GAZ9B,eAYGG,EAZH,yBAaIA,GAbJ,kCAeHC,IAAAA,OAAAA,QAAwB,KAAMC,SAf3B,kF,6CCaP,IAde,WACb,OACE,0BACE,SAAC,KAAD,CACEC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAIhB,C,wHC6BD,UAtCgB,WACd,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCL,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KAeA,OAdAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACb,IAAME,EAAY,mCAAG,8GAEMzB,EAAAA,EAAAA,GAAU,UAAD,OAAWoB,EAAX,YAA8B,GAF7C,OAEXb,EAFW,OAGjBU,EAAUV,EAASmB,KAAKC,SAHP,gDAKjBR,EAAS,SALQ,yBAOjBI,GAAa,GAPI,4EAAH,qDAUlBE,GACD,GAAE,CAACL,KAEF,2BACGE,IAAa,SAAC,IAAD,IACbJ,IAAS,uBAAG,gCACZF,EAAOY,OAAS,GAAI,wBAAI,aAAe,wBAAI,gBAC3CZ,IACC,wBACGA,EAAOa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,2BACE,0BAAI,WAASD,MACb,yBAAG,mBAAiBC,OAFbF,EADC,QAUrB,C","sources":["REST API/api-service.js","components/Loader/Loader.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import Notiflix from 'notiflix';\nimport axios from 'axios';\n\nexport async function fetchData(FLEX_URL, page = 1, search = '') {\n  try {\n    const BASE_URL = `https://api.themoviedb.org/3`;\n    const API_KEY = `e001340a26371433e04561724452dcfa`;\n    let URL = BASE_URL + FLEX_URL + `?api_key=${API_KEY}`;\n\n    if (search) {\n      URL = URL + `&query=${search.trim()}`;\n    }\n    if (page) {\n      URL = URL + `&page=${page}`;\n    }\n    const responce = await axios.get(URL);\n    return responce;\n  } catch (error) {\n    Notiflix.Notify.failure(error.message);\n  }\n}\n","import { RotatingLines } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","import { fetchData } from 'REST API/api-service';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [review, setReview] = useState([]);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    setIsLoading(true);\n    const commentsData = async () => {\n      try {\n        const responce = await fetchData(`/movie/${movieId}/reviews`, 0);\n        setReview(responce.data.results);\n      } catch {\n        setError('error');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    commentsData();\n  }, [movieId]);\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <p>Oops, something went wrong!</p>}\n      {review.length > 0 ? <h3>Reviews</h3> : <h3>No reviews!</h3>}\n      {review && (\n        <ul>\n          {review.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>Author: {author}</h4>\n              <p>Autor's review: {content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["fetchData","FLEX_URL","page","search","URL","trim","axios","responce","Notiflix","message","strokeColor","strokeWidth","animationDuration","width","visible","useState","review","setReview","error","setError","movieId","useParams","isLoading","setIsLoading","useEffect","commentsData","data","results","length","map","id","author","content"],"sourceRoot":""}